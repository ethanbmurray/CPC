class Solution:
    def minCostClimbingStairs(self, cost: List[int]) -> int:
        #BASE CASE: C[0]=0 or C[1]=0
        #C[n] is cost to get to stair n
        #C[n] = min( C[n-1]+cost[n-1], C[n-2]+cost[n-2] )

        #return self.bottom_up(cost)
        #return self.top_down_dictionary(cost)
        #return self.top_down_cache(cost)
        


    # def bottom_up(self,cost):
    #     n=len(cost)
    #     C = [0]*(n+1)
    #     print(C)
    #     for i in range(2,n+1):
    #         C[i] = min( C[i-1]+cost[i-1], C[i-2]+cost[i-2] )
    #         #print(C)
    #     return C[-1]

    # def top_down_dictionary(self,cost):
    #     calc = {}
    #     def C(i):
    #         if i in calc:
    #             return calc[i]
    #         else:
    #             result =  0 if i<=1 else \
    #             (min( C(i-1)+cost[i-1], C(i-2)+cost[i-2] ))
    #             calc[i] = result
    #             return calc[i]

    #     return C(len(cost))

    from functools import lru_cache

    def top_down_cache(self,cost):

        @lru_cache(maxsize=None)
        def C(i):
                return 0 if i<=1 else \
                (min( C(i-1)+cost[i-1], C(i-2)+cost[i-2] ))

        return C(len(cost))
